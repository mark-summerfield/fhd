fhd.go
consts.go

fhd_test.go

README.md

st.sh

# NOTE

The `fhd` package allows its clients to do the following (where _files_ is
short for "all files or one or more specified files" and _fid_ is short for
"one or more specified file identifiers, i.e., filename and sid (save ID)"):

- open: open (and create if needed) the initial `.fhd` with the given
  filename (in cli & gui this should default to `folder.fhd`);
- get state: get the state for _files_;
- set state: set the state for _files_ in the current folder (optionally
  including subfolders) to – monitored, unmonitored (for a previously
  monitored file), or ignored;
- save: save a snapshot of the monitored _files_ (“check in”) with a
  timestamp and an optional comment—this creates a new sid (save ID);
- query: return a list of _fids_ and datetimes for _files_;
- extract: extract any previously saved copy (using a unique generated
  filename or a given filename) for _fids_;
- delete: delete one or more previously saved copies of a monitored file
  (thus forgetting parts of its history) for _fids_, and set the filenames'
  states to unmonitored.

    STATE
    key filename string
    value state enum # monitored unmonitored ignored

    SAVES
    key sid int # > 0
    value bucket
	key filename string # see below for special cases
	value struct { 
		content blob
		sha256 blob
		csid int # > 0 if content and sha256 are empty (see below)
		}

    RENAMED
    key oldname string
    value newname string

In a SAVES value's bucket there are two special non-filename keys
- *when datetime # save timestamp
- *comment string

The initial monitor creates the STATE and SAVES, populates STATE setting
state to monitored and then does a save. It creates a new sid and
corresponding value bucket and sets the bucket's `*when` and `*comment`
and for each file adds the filename as key and sets its value struct's
content to the file's content, sha256 to the content's sha256, and the
csid to 0.

On subsequent saves the filenames to use are all those in STATE whose
state is monitored. For each file to save generate its sha256 and
compare that with the sha256s of its predecessor (or predecessor's
predecessor if its predecessor's csid > 0, and so on) - if a match is
found, set content and sha256 to empty and csid to the matched one;
otherwise populate content and the sha256 and set csid to 0.

Renaming means - add oldname–newname to RENAMED, set STATE oldname to
unmonitored and add newname to STATE as monitored.

# vim: syn=yaml
